import { __assign, __awaiter, __generator } from "tslib";
import { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, } from "@solana/spl-token";
import * as anchor from "@project-serum/anchor";
import { getTokenAccount, getTreasuryPDA } from "../../utils/pda";
export function initTreasury(program, authority, owners, shares, mint, payer) {
    if (payer === void 0) { payer = null; }
    return __awaiter(this, void 0, void 0, function () {
        var treasuryPDA, treasuryATA, method;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    treasuryPDA = getTreasuryPDA(program, owners, shares, mint);
                    return [4 /*yield*/, getTokenAccount(treasuryPDA, mint)];
                case 1:
                    treasuryATA = _a.sent();
                    method = payer ? program.methods.initBuddyTreasuryWithPayer : program.methods
                        .initBuddyTreasury;
                    return [4 /*yield*/, method(shares)
                            .accounts(__assign({ associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID, tokenProgram: TOKEN_PROGRAM_ID, systemProgram: anchor.web3.SystemProgram.programId, rent: anchor.web3.SYSVAR_RENT_PUBKEY, authority: authority, owner1: owners[0] || null, owner2: owners[1] || null, owner3: owners[2] || null, owner4: owners[3] || null, mint: mint, buddyTreasury: treasuryPDA, buddyTokenAccount: treasuryATA }, (payer ? { payer: payer } : {})))
                            .instruction()];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
//# sourceMappingURL=initTreasury.js.map