import { __awaiter, __generator } from "tslib";
import { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, } from "@solana/spl-token";
import * as anchor from "@project-serum/anchor";
import { getTokenAccount, getTreasuryPDA } from "../../utils/pda";
import { getMasterTreasuryPDA } from "../../utils/pda";
import { BUDDY_DOESNT_EXIST, TREASURY_DOESNT_EXIST, TREASURY_OWNER_MISMATCH, } from "../../utils/type";
import { parsePublicKey } from "../../utils/parse";
import { initTreasury } from "../init/initTreasury";
export function transferUp(program, authority, buddyPDA, treasuryPDA) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var instructions, treasury, masterOrg, masterTreasuryPDA, masterTreasuryATA, buddy, profilePDA, profile, buddyTreasuryATA, referrerTreasury, referrerTreasuryRewards, owners, shares, _i, _b, owner, newReferrerTreasuryPDA, newTreasury, _c, _d, referrerTreasuryATA, _e, _f;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    instructions = [];
                    return [4 /*yield*/, program.account.treasury.fetchNullable(treasuryPDA)];
                case 1:
                    treasury = _g.sent();
                    if (!treasury)
                        throw TREASURY_DOESNT_EXIST;
                    if (!treasury.owners.find(function (owner) { return owner.ownerPda.toString() === buddyPDA.toString(); }))
                        throw TREASURY_OWNER_MISMATCH;
                    return [4 /*yield*/, program.account.masterOrganization.all()];
                case 2:
                    masterOrg = (_g.sent())[0];
                    masterTreasuryPDA = getMasterTreasuryPDA(program, treasury.mint);
                    return [4 /*yield*/, getTokenAccount(masterTreasuryPDA, treasury.mint)];
                case 3:
                    masterTreasuryATA = _g.sent();
                    return [4 /*yield*/, program.account.buddy.fetchNullable(buddyPDA)];
                case 4:
                    buddy = _g.sent();
                    if (!buddy)
                        throw BUDDY_DOESNT_EXIST;
                    profilePDA = buddyPDA;
                    if (!!((_a = buddy.buddyType) === null || _a === void 0 ? void 0 : _a.profile)) return [3 /*break*/, 6];
                    return [4 /*yield*/, program.account.buddy.all([
                            { memcmp: { offset: 8, bytes: buddy.authority.toBase58() } },
                        ])];
                case 5:
                    profile = (_g.sent())[0];
                    profilePDA = profile.publicKey;
                    _g.label = 6;
                case 6: return [4 /*yield*/, getTokenAccount(treasuryPDA, treasury.mint)];
                case 7:
                    buddyTreasuryATA = _g.sent();
                    return [4 /*yield*/, program.account.treasury.fetch(buddy.referrerTreasuryPda)];
                case 8:
                    referrerTreasury = _g.sent();
                    referrerTreasuryRewards = buddy.referrerTreasuryPda;
                    if (!(referrerTreasury.mint.toString() !== treasury.mint.toString())) return [3 /*break*/, 11];
                    owners = [], shares = [];
                    for (_i = 0, _b = referrerTreasury.owners; _i < _b.length; _i++) {
                        owner = _b[_i];
                        owners.push(owner.ownerPda);
                        shares.push(owner.share);
                    }
                    newReferrerTreasuryPDA = getTreasuryPDA(program, owners, shares, parsePublicKey(treasury.mint));
                    return [4 /*yield*/, program.account.treasury.fetchNullable(newReferrerTreasuryPDA)];
                case 9:
                    newTreasury = _g.sent();
                    referrerTreasuryRewards = newReferrerTreasuryPDA;
                    if (!!newTreasury) return [3 /*break*/, 11];
                    _d = (_c = instructions).push;
                    return [4 /*yield*/, initTreasury(program, authority, owners, shares, parsePublicKey(treasury.mint))];
                case 10:
                    _d.apply(_c, [_g.sent()]);
                    _g.label = 11;
                case 11: return [4 /*yield*/, getTokenAccount(referrerTreasuryRewards, treasury.mint)];
                case 12:
                    referrerTreasuryATA = _g.sent();
                    _f = (_e = instructions).push;
                    return [4 /*yield*/, program.methods
                            .transferUp()
                            .accounts({
                            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
                            tokenProgram: TOKEN_PROGRAM_ID,
                            systemProgram: anchor.web3.SystemProgram.programId,
                            rent: anchor.web3.SYSVAR_RENT_PUBKEY,
                            authority: authority,
                            masterOrganization: masterOrg.publicKey,
                            masterOrganizationTreasury: masterTreasuryPDA,
                            masterOrganizationTokenAccount: masterTreasuryATA,
                            buddyProfile: profilePDA,
                            buddy: buddyPDA,
                            buddyTreasury: treasuryPDA,
                            buddyTokenAccount: buddyTreasuryATA,
                            mint: parsePublicKey(treasury.mint),
                            referrerTreasury: buddy.referrerTreasuryPda,
                            referrerTreasuryForReward: referrerTreasuryRewards,
                            referrerTokenAccount: referrerTreasuryATA
                        })
                            .instruction()];
                case 13:
                    _f.apply(_e, [_g.sent()]);
                    return [2 /*return*/, instructions];
            }
        });
    });
}
//# sourceMappingURL=transferUp.js.map