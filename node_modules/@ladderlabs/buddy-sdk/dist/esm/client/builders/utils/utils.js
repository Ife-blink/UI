import { __assign, __awaiter, __generator } from "tslib";
import { getBuddyPDA, getOrganizationPDA, getTreasuryPDA } from "../../../utils/pda";
import { ORGANIZATION_NOT_EXIST } from "../../../utils/type";
export var getOrganization = function (program, organizationName) { return __awaiter(void 0, void 0, void 0, function () {
    var organizationPDA, organizationAccount;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                organizationPDA = getOrganizationPDA(program, organizationName.toLowerCase());
                return [4 /*yield*/, program.account.organization.fetchNullable(organizationPDA)];
            case 1:
                organizationAccount = _a.sent();
                if (!organizationAccount)
                    throw ORGANIZATION_NOT_EXIST.replace("{}", organizationName.toLowerCase());
                return [2 /*return*/, __assign({ pda: organizationPDA }, organizationAccount)];
        }
    });
}); };
export var getBuddy = function (program, name) { return __awaiter(void 0, void 0, void 0, function () {
    var buddyPDA, buddyAccount;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!name)
                    return [2 /*return*/, null];
                buddyPDA = getBuddyPDA(program, name.toLowerCase());
                return [4 /*yield*/, program.account.buddy.fetchNullable(buddyPDA)];
            case 1:
                buddyAccount = _a.sent();
                return [2 /*return*/, buddyAccount ? __assign({ pda: buddyPDA }, buddyAccount) : null];
        }
    });
}); };
export var getProfile = function (program, wallet) { return __awaiter(void 0, void 0, void 0, function () {
    var buddyProfile;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, program.account.buddy.all([
                    { memcmp: { offset: 8, bytes: wallet.toBase58() } },
                ])];
            case 1:
                buddyProfile = (_a.sent())[0];
                return [2 /*return*/, buddyProfile ? __assign({ pda: buddyProfile.publicKey }, buddyProfile.account) : null];
        }
    });
}); };
export var getSingleTreasury = function (program, owner, mint) { return __awaiter(void 0, void 0, void 0, function () {
    var treasuryPDA, treasury;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                treasuryPDA = getTreasuryPDA(program, [owner], [10000], mint);
                return [4 /*yield*/, program.account.treasury.fetchNullable(treasuryPDA)];
            case 1:
                treasury = _a.sent();
                return [2 /*return*/, treasury ? (__assign({ pda: treasuryPDA }, treasury)) : null];
        }
    });
}); };
//# sourceMappingURL=utils.js.map