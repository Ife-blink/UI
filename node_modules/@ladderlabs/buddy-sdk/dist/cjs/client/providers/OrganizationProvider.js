"use strict";
exports.__esModule = true;
exports.OrganizationProvider = void 0;
var tslib_1 = require("tslib");
var type_1 = require("../../utils/type");
var Organization_1 = require("../../models/Organization");
var pda_1 = require("../../utils/pda");
var OrganizationProvider = /** @class */ (function () {
    function OrganizationProvider(program, wallet) {
        this.program = program;
        this.wallet = wallet;
    }
    OrganizationProvider.prototype.getAll = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var organization;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.program.account.organization.all()];
                    case 1:
                        organization = _a.sent();
                        return [2 /*return*/, organization.map(function (organization) {
                                return new Organization_1.Organization(tslib_1.__assign(tslib_1.__assign({}, organization.account), { pda: organization.publicKey }), _this.program, _this.wallet);
                            })];
                }
            });
        });
    };
    OrganizationProvider.prototype.getByPDA = function (organizationPDA) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var organization;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.program.account.organization.fetchNullable(organizationPDA)];
                    case 1:
                        organization = _a.sent();
                        if (!organization)
                            return [2 /*return*/, null];
                        return [2 /*return*/, new Organization_1.Organization(tslib_1.__assign(tslib_1.__assign({}, organization), { pda: organizationPDA }), this.program, this.wallet)];
                }
            });
        });
    };
    OrganizationProvider.prototype.getByAmbassador = function (ambssador) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var organizations;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.program.account.ambassador.all([{
                                memcmp: {
                                    offset: 123,
                                    bytes: ambssador.toBase58()
                                }
                            }])];
                    case 1:
                        organizations = _a.sent();
                        return [2 /*return*/, organizations.map(function (organization) {
                                return new Organization_1.Organization(tslib_1.__assign(tslib_1.__assign({}, organization.account), { pda: organization.publicKey }), _this.program, _this.wallet);
                            })];
                }
            });
        });
    };
    OrganizationProvider.prototype.getByName = function (name) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var organizationPDA;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        organizationPDA = (0, pda_1.getOrganizationPDA)(this.program, name.toLowerCase());
                        return [4 /*yield*/, this.getByPDA(organizationPDA)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OrganizationProvider.prototype.getByWallet = function (wallet) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var orgs;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.wallet && wallet)
                            throw type_1.NO_WALLET_ERROR;
                        return [4 /*yield*/, this.program.account.organization.all([
                                {
                                    memcmp: {
                                        offset: 8,
                                        bytes: wallet ? wallet.toBase58() : this.wallet.toBase58()
                                    }
                                },
                            ])];
                    case 1:
                        orgs = (_a.sent()).map(function (organization) {
                            return new Organization_1.Organization(tslib_1.__assign(tslib_1.__assign({}, organization.account), { pda: organization.publicKey }), _this.program, wallet ? wallet : _this.wallet);
                        });
                        return [2 /*return*/, orgs];
                }
            });
        });
    };
    return OrganizationProvider;
}());
exports.OrganizationProvider = OrganizationProvider;
//# sourceMappingURL=OrganizationProvider.js.map